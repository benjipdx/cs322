diff --git a/322/hw1/DemoComp/HW1/Src.java b/322/hw1/DemoComp/HW1/Src.java
index 0a714b9..a89c617 100644
--- a/322/hw1/DemoComp/HW1/Src.java
+++ b/322/hw1/DemoComp/HW1/Src.java
@@ -87,6 +87,70 @@ class Minus extends IExpr {
   }
 }
 
+class Even extends BExpr {
+  private IExpr derp;
+
+  Even(IExpr derp){
+    this.derp = derp;
+  }
+
+  boolean eval(Memory mem){
+    return derp.eval(mem)%2 == 0;
+  }
+
+  String show() {
+    return "even("+ derp.show() + ")";
+  }
+
+  Code compileTo(Reg reg, Code next){
+    return derp.compileTo(reg, new EvenT(reg,next));
+  }
+}
+
+class Halve extends IExpr{
+  private IExpr exp;
+
+  Halve(IExpr exp){
+    this.exp = exp;
+  }
+
+  int eval(Memory mem){
+    return exp.eval(mem)/2;
+  }
+
+  String show(){
+    return "halve("+ exp.show() + ")";
+  }
+
+  Code compileTo(Reg reg, Code next){
+    return exp.compileTo(reg, new HalveT(reg,next));
+  }
+
+}
+
+class LTE extends BExpr {
+  private IExpr l, r;
+  LTE(IExpr l, IExpr r){
+    this.l = l;
+    this.r = r;
+  }
+  boolean eval(Memory mem){
+    return (l.eval(mem) <= r.eval(mem));
+  }
+
+  String show(){
+    return "(" + l.show() + " <= " + r.show() + ")";
+  }
+
+  Code compileTo(Reg reg, Code next){
+    Reg tmp = new Reg();
+    return l.compileTo(tmp,
+           r.compileTo(reg,
+           new LTET(reg, tmp, reg, next)));
+  }
+
+}
+
 //____________________________________________________________________________
 // BExpr ::= IExpr < IExpr
 //        |  IExpr == IExpr
@@ -95,12 +159,14 @@ abstract class BExpr {
   abstract boolean eval(Memory mem);
   abstract String  show();
   abstract Code compileTo(Reg reg, Code next);
-    public static boolean i2b(int i) {
+  /*
+  public static boolean i2b(int i) {
         return (i!=0);
-    }   
+       
     public static int b2i(boolean b) {
         return b ? 1 : 0;
-    }   
+    }
+   */
 }
 
 class LT extends BExpr {
@@ -140,6 +206,7 @@ class EqEq extends BExpr {
 //        |  If BExpr Stmt Stmt
 //        |  Print IExpr
 
+/*
 class Bool extends BExpr{
   private boolean bool;
   Bool(boolean bool) { this.bool = bool; }
@@ -148,28 +215,26 @@ class Bool extends BExpr{
   String show() { return Boolean.toString(bool); }
 
   Code compileTo(Reg reg, Code next) {
-    return new Immed(reg, b2i(bool), next);
+    return new Immed(reg, bool, next);
   }
 }
-
-class Not extends BExpr{ //TODO this is not finished
+*/
+class Not extends BExpr{ 
   private BExpr exp;
   Not(BExpr exp){
     this.exp = exp;
   }
   String show(){
-    { return "( !" + exp.show() + ")";}
+    { return "not(" + exp.show() + ")";}
   }
   
   boolean eval(Memory mem){
     return !exp.eval(mem);
   }
   Code compileTo(Reg reg, Code next){
-    Reg tmp = new Reg();
-    return exp.compileTo(tmp,
-      new Op(reg, tmp, '!', reg, next));
+    return exp.compileTo(reg,
+           new NotT(reg, next)); 
   }
-
 }
 
 abstract class Stmt {
@@ -225,30 +290,6 @@ class Assign extends Stmt {
   }
 }
 
-/*
-class BoolAssign extends Stmt {
-  private String lhs;
-  private BExpr  rhs;
-  BoolAssign(String lhs, BExpr rhs) {
-    this.lhs = lhs; this.rhs = rhs;
-  }
-
-  void exec(Memory mem) {
-    mem.store(lhs, rhs.eval(mem));
-  }
-
-  Code compile(Program prog, Code next) {
-    Reg tmp = new Reg();
-    return rhs.compileTo(tmp, new Store(lhs, tmp, next));
-  }
-
-  void print(int ind) {
-    indent(ind);
-    System.out.println(lhs + " = " + rhs.show() + ";");
-  }
-}
-
-*/
 class While extends Stmt {
   private BExpr test;
   private Stmt  body;
